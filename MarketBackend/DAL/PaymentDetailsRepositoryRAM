using System;
using System.Collections.Generic;
using System.Linq;
using MarketBackend.Domain.Models;
using MarketBackend.Services.Interfaces;

namespace MarketBackend.DAL
{
    public class PaymentDetailsRepositoryRAM : IPaymentDetailsRepository
    {
        private readonly Dictionary<int, PaymentDetails> shippedPurchases;

         public ShipingDetailsRepositoryRAM()
        {
            shippedPurchases = new Dictionary<int, PaymentDetails>();
        }

        public void Add(PaymentDetails entity)
        {
            if(shippedPurchases.ContainsKey(entity.cardNumber)){
                throw new ArgumentException($"Payment Details with the card number: {entity.cardNumber} already exists.");

            }
            shippedPurchases.Add(entity.address, entity);
        }

        public void Delete(PaymentDetails entity)
        {
            if (!PaymentDetails.ContainsKey(entity.cardNumber)){
                throw new KeyNotFoundException($"Payment Details with the card number: {entity.cardNumber} does not exist.");
            }

            PaymentDetails.Remove(entity.cardNumber);
        }

        public IEnumerable<PaymentDetails> getAll()
        {
            return PaymentDetails.Values.ToList();
        }

        public string getPaymentDetailsByCardNumber( string address)
        {
            return PaymentDetails.Values.Where(PaymentDetails => PaymentDetails.cardNumber == string cardNumber).ToString();
        }


        public void Update(PaymentDetails entity)
        {
            if (PaymentDetails.ContainsKey(entity.cardNumber))
            {
                PaymentDetails[entity.address] = entity;
            }
            else
            {
                throw new KeyNotFoundException($"Payment Details with the card number: {entity.address} not found.");
            }
        }
    }
}

